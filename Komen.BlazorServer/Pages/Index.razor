@page "/"
@using Nethereum.UI
@inject IJSRuntime jsRuntime;
@inject IEthereumHostProvider ethereumHostProvider;
@inject NethereumAuthenticator  nethereumAuthenticator;

@if (!hasMeta)
{
    <div class="alert alert-light mt-4" role="alert">
        <span class="oi oi-data-transfer-download mr-2" aria-hidden="true"></span>
        <span class="text-nowrap">
            请先连接 MetaMask，如果您还没有 MetaMask，请先安装。 
            <a target="_blank" class="font-weight-bold" href="https://metamask.io/">获取</a>
        </span>
    </div>
}
else if(!isConnected)
{
    <div class="mt-2">
        <Metamask />
    </div>
}
else
{

    <div class="p-5 mb-4 bg-light">
        <div class="container-fluid py-5">
            <h1 class="display-4 monoton">KOMEN</h1>
            <p>Authentication gateway to connect Web3 identity to your Web2.0 site.</p>
            @*<button type="button" class="btn btn-primary" @onclick="async () => await Sign()">签名</button>*@ 
       </div>
    </div>
    }

@code
{
    bool hasMeta;
    bool isConnected;
    string account = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstTime)
    {
        if (firstTime)
        {
            ethereumHostProvider.SelectedAccountChanged += EthereumHostProviderOnSelectedAccountChanged;
            hasMeta = await ethereumHostProvider.CheckProviderAvailabilityAsync();
            isConnected = !string.IsNullOrWhiteSpace(ethereumHostProvider.SelectedAccount);
            
            await ethereumHostProvider.EnableProviderAsync();
        }
    }

    private async Task EthereumHostProviderOnSelectedAccountChanged(string arg)
    {
        isConnected = !string.IsNullOrWhiteSpace(arg);
        account = arg;
        StateHasChanged();
    }
}
