@page "/"
@using JWT.Builder
@using Nethereum.Signer
@using System.Text
@using JWT.Algorithms
@using Microsoft.AspNetCore.WebUtilities
@inject IJSRuntime jsRuntime;
@inject IEthereumHostProvider ethereumHostProvider;
@inject NethereumAuthenticator  nethereumAuthenticator;
@inject NavigationManager navigation

@if (!hasMeta)
{
    <div class="alert alert-light mt-4" role="alert">
        <span class="oi oi-data-transfer-download mr-2" aria-hidden="true"></span>
        <span class="text-nowrap">
            请先连接 MetaMask，如果您还没有 MetaMask，请先安装。 
            <a target="_blank" class="font-weight-bold" href="https://metamask.io/">获取</a>
        </span>
    </div>
}
else if(!isConnected)
{
    <div class="mt-2">
        <Metamask />
    </div>
}
else if(!string.IsNullOrWhiteSpace(new Uri(navigation.Uri).Query))
{
    <div class="p-5 my-5 mx-1 bg-light">
        <div class="container-fluid py-5">
            <h1 class="display-4 monoton">KOMEN</h1>
            <h2>验证以「@act」</h2>
            <p>您将使用 Ethereum 签名为「@iss」完成验证。</p>
            <button type="button" class="btn btn-outline-dark" 
                    style="background-image: linear-gradient(45deg, rgba(247, 149, 51, 0.101961) 0, rgba(243, 112, 85, 0.101961) 15%, rgba(239, 78, 123, 0.101961) 30%, rgba(161, 102, 171, 0.101961) 44%, rgba(80, 115, 184, 0.101961) 58%, rgba(16, 152, 173, 0.101961) 72%, rgba(7, 179, 155, 0.101961) 86%, rgba(109, 186, 130, 0.101961) 100%);"
                    @onclick="async () => await Sign()">签名以完成验证</button> 
        </div>
    </div>
}
else
{

    <div class="p-5 mb-4 bg-light">
        <div class="container-fluid py-5">
            <h1 class="display-4 monoton">KOMEN</h1>
            <p>Authentication gateway for connect Web3 identity to Web2.0 site.</p>
            @*<button type="button" class="btn btn-primary" @onclick="async () => await Sign()">签名</button>*@ 
       </div>
    </div>
}

@code
{
    bool hasMeta;
    bool isConnected;
    string account = string.Empty;
    string iss = string.Empty;
    string url = string.Empty;
    string msg = string.Empty;
    string act = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstTime)
    {
        if (firstTime)
        {
            ethereumHostProvider.SelectedAccountChanged += EthereumHostProviderOnSelectedAccountChanged;
            hasMeta = await ethereumHostProvider.CheckProviderAvailabilityAsync();
            isConnected = !string.IsNullOrWhiteSpace(ethereumHostProvider.SelectedAccount);
            await ethereumHostProvider.EnableProviderAsync();
        }
    }

    private async Task EthereumHostProviderOnSelectedAccountChanged(string arg)
    {
        isConnected = !string.IsNullOrWhiteSpace(arg);
        account = arg;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        if (string.IsNullOrWhiteSpace(new Uri(navigation.Uri).Query))
        {
            return;
        }
        try
        {
            var obj = JwtBuilder.Create()
                .WithAlgorithm(new HMACSHA256Algorithm())
                .DoNotVerifySignature()
                .Decode<IDictionary<string, string>>(new Uri(navigation.Uri).Query);

            iss = obj["iss"];
            msg = obj["msg"];
            url = obj["url"];
            act = obj["act"];
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            navigation.NavigateTo("/", true);
        }
    }

    async Task Sign()
    {
        try
        {
            var challenge = msg;
            var signedMessage = await ethereumHostProvider.SignMessageAsync(challenge);

            Console.WriteLine("C:" + challenge);
            Console.WriteLine("S:" + signedMessage);

            var recover = new EthereumMessageSigner().EncodeUTF8AndEcRecover(challenge, signedMessage);
            if (recover.ToLower().Trim() == account.ToLower().Trim())
            {
                navigation.NavigateTo(url + "?a=komen&u=" + account.ToLower().Trim() + "&x=" + signedMessage
                                      + "&msg=" + Base64UrlTextEncoder.Encode(Encoding.UTF8.GetBytes(msg)), true);
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}
